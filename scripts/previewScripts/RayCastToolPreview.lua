------------------------------------------------------------------------------------------------------------------------
-- Copyright (c) 2011 NaturalMotion.  All Rights Reserved.
-- Not to be copied, adapted, modified, used, distributed, sold, licensed or commercially exploited in any manner
-- without the written consent of NaturalMotion.
--
-- All non public elements of this software are the confidential information of NaturalMotion and may not be disclosed
-- to any person nor used for any purpose not expressly approved by NaturalMotion in writing.
------------------------------------------------------------------------------------------------------------------------
require "previewScripts/VectorMath.lua"
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
-- cache of compiled ray cast type preview scripts, saves them being recompiled every time.
------------------------------------------------------------------------------------------------------------------------
local cachedRayCastTypePreviewScripts = {}

------------------------------------------------------------------------------------------------------------------------
-- mimics the functionality of require but only compiles the file returning the lua chunk
-- the returned chunk can then be executed at will using call or pcall later.
------------------------------------------------------------------------------------------------------------------------
local loadRayCastTypePreviewScript = function(filename)
  -- early out if we've already compiled this once this preview
  --
  if type(cachedRayCastTypePreviewScripts[filename]) == "function" then
    return cachedRayCastTypePreviewScripts[filename]
  end

  -- loop LUA_PATH breaking it up by ;
  --
  local previous = 0
  local current = string.find(LUA_PATH, ";")
  while current do
    local current_path = string.sub(LUA_PATH, previous, current - 1)
    -- for each current_path in LUA_PATH substitute ? for filename
    --
    local current_file = string.gsub(current_path, "?", filename)

    -- attempt to load this file and break if successful
    --
    local chunk = loadfile(current_file)
    if chunk then
      cachedRayCastTypePreviewScripts[filename] = chunk
      return chunk
    end
    
    previous = current + 1
    current = string.find(LUA_PATH, ";", previous)
  end

  -- the filename could not be found in the paths
  return nil
end

------------------------------------------------------------------------------------------------------------------------
-- handle any events generated by the ray cast tool
------------------------------------------------------------------------------------------------------------------------
local onRayCastTool = function(event)
  -- compile the preview script for this ray cast type
  --
  local rayCastTypePreviewScript = loadRayCastTypePreviewScript(event.previewScriptFile)

  -- if the preview script successfully compiled then call it
  --
  if rayCastTypePreviewScript then
    -- make sure that _RAYCASTEVENT is restored after this call
    --
    local temp = _RAYCASTEVENT
    _RAYCASTEVENT = event
    
    -- call the preview script, _RAYCASTEVENT is used by the script to access the ray cast event
    --
    local result, error = pcall(rayCastTypePreviewScript)
    if not result then
      print(error)
    end
    
    -- restore _RAYCASTEVENT after our call
    --
    _RAYCASTEVENT = temp
  end
end

registerRayCastToolHandler(onRayCastTool)